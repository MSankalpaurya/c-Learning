
LEVEL 1 
Question 1: What type of casting is happening in the following code?

    int x = 5;
    float y = x;

Question 2: What will be the output of this code?

    int x = 10;
    float y = (float)x / 4;
    std::cout << y << std::endl;


Question 3: What will happen in the following code?
 
    int a = 10;
    void* p = &a;
    int* intPtr = static_cast<int*>(p);

    std::cout << *intPtr << std::endl;

Question 4: What will dynamic_cast return in this code?

    #include <iostream>
    class Base {
    public:
        virtual ~Base() {}
    };

    class Derived : public Base {};

    int main() {
        Base baseObj;
        Base* basePtr = &baseObj;

        Derived* derivedPtr = dynamic_cast<Derived*>(basePtr);

        if (derivedPtr)
            std::cout << "Downcast succeeded!" << std::endl;
        else
            std::cout << "Downcast failed!" << std::endl;

        return 0;
    }


Question 5: What will happen if we try this reinterpret cast?

    #include <iostream>
    class Base {
    public:
        int a = 5;
    };

    class Unrelated {
    public:
        int b = 10;
    };

    int main() {
        Base baseObj;
        Unrelated* unrelatedPtr = reinterpret_cast<Unrelated*>(&baseObj);

        std::cout << unrelatedPtr->b << std::endl;

        return 0;
    }


Question 6: What happens in this case of const_cast?

    #include <iostream>
    void print(const int& x) {
        int& modifiableX = const_cast<int&>(x);
        modifiableX += 5;
        std::cout << x << std::endl;
    }

    int main() {
        int a = 10;
        print(a);

        return 0;
    }

LEVEL 2

Question 7: What will happen in the following code?

    #include <iostream>
    class Base {
    public:
        virtual void display() { std::cout << "Base" << std::endl; }
    };

    class Derived : public Base {
    public:
        void display() override { std::cout << "Derived" << std::endl; }
    };

    int main() {
        Derived derivedObj;
        Base* basePtr = &derivedObj;

        Derived* derivedPtr = dynamic_cast<Derived*>(basePtr);
        if (derivedPtr)
            derivedPtr->display();
        else
            std::cout << "Downcast failed!" << std::endl;

        return 0;
    }


Question 8: What will reinterpret_cast do in this example?

    #include <iostream>
    class Base {
    public:
        int a = 42;
    };

    int main() {
        Base baseObj;
        int* intPtr = reinterpret_cast<int*>(&baseObj);

        std::cout << *intPtr << std::endl;
        return 0;
    }

Question 9: What is the output of the following code using static_cast?

    #include <iostream>
    class Base {
    public:
        virtual void show() { std::cout << "Base" << std::endl; }
    };

    class Derived : public Base {
    public:
        void show() override { std::cout << "Derived" << std::endl; }
    };

    int main() {
        Derived derivedObj;
        Base* basePtr = static_cast<Base*>(&derivedObj);

        basePtr->show();
        return 0;
    }


Question 10: What will happen in this case of invalid dynamic_cast?

    #include <iostream>
    class Base {
    public:
        virtual void func() {}
    };

    class Derived : public Base {};
    class AnotherDerived : public Base {};

    int main() {
        AnotherDerived anotherObj;
        Base* basePtr = &anotherObj;

        Derived* derivedPtr = dynamic_cast<Derived*>(basePtr);
        if (derivedPtr)
            std::cout << "Downcast succeeded!" << std::endl;
        else
            std::cout << "Downcast failed!" << std::endl;

        return 0;
    }


Question 11: What happens if you const_cast a truly constant object?

    #include <iostream>
    int main() {
        const int x = 10; // TRUELY CONST VARIABLE
        int& modifiableX = const_cast<int&>(x);
        modifiableX += 5;

        std::cout << x << std::endl;
        return 0;
    }


Question 12: What does this reinterpret cast do?


    #include <iostream>
    struct A {
        int x;
    };

    struct B {
        float y;
    };

    int main() {
        A objA = {42};
        B* bPtr = reinterpret_cast<B*>(&objA);

        std::cout << bPtr->y << std::endl;
        return 0;
    }
Answer
Structures A and B are unrelated, and casting between their pointers with reinterpret_cast 
results in undefined behavior.
 
LEVEL 3

Question 13: What happens with static_cast here?

    #include <iostream>
    class A {
    public:
        virtual void show() { std::cout << "A" << std::endl; }
    };

    class B : public A {
    public:
        void show() override { std::cout << "B" << std::endl; }
    };

    class C : public A {};

    int main() {
        A* basePtr = new C();
        B* derivedPtr = static_cast<B*>(basePtr);

        if (derivedPtr)
            derivedPtr->show();
        else
            std::cout << "Static cast failed!" << std::endl;

        delete basePtr;
        return 0;
    }


Question 14: What will reinterpret_cast do here?

    #include <iostream>
    class A {
    public:
        int a = 10;
    };

    class B {
    public:
        int b = 20;
    };

    int main() {
        A objA;
        B* bPtr = reinterpret_cast<B*>(&objA);

        std::cout << bPtr->b << std::endl;
        return 0;
    }

Question 15: What happens in this const_cast scenario?

    #include <iostream>
    void modifyValue(const int& val) {
        int& nonConstVal = const_cast<int&>(val);
        nonConstVal = 50;
    }

    int main() {
        const int x = 25;
        modifyValue(x);

        std::cout << x << std::endl;
        return 0;
    }


Question 16: What is the result of this dynamic_cast?


    #include <iostream>
    class Base {
    public:
        virtual ~Base() {}
    };

    class Derived : public Base {};

    int main() {
        Base* basePtr = new Base();
        Derived* derivedPtr = dynamic_cast<Derived*>(basePtr);

        if (derivedPtr)
            std::cout << "Dynamic cast succeeded!" << std::endl;
        else
            std::cout << "Dynamic cast failed!" << std::endl;

        delete basePtr;
        return 0;
    }


Question 17: What is the behavior of this code with mixed casting?

    #include <iostream>
    class A {
    public:
        virtual void display() { std::cout << "Class A" << std::endl; }
    };

    class B : public A {
    public:
        void display() override { std::cout << "Class B" << std::endl; }
    };

    class C : public A {
    public:
        void display() override { std::cout << "Class C" << std::endl; }
    };

    int main() {
        A* obj = new B();
        C* cPtr = dynamic_cast<C*>(obj);

        if (cPtr)
            cPtr->display();
        else
            std::cout << "Cast to C failed!" << std::endl;

        delete obj;
        return 0;
    }
